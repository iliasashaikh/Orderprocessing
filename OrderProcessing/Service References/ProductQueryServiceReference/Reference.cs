//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderProcessing.ProductQueryServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductQueryServiceReference.IProductQueryService")]
    public interface IProductQueryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueryServiceBaseOf_Product/All", ReplyAction="http://tempuri.org/IQueryServiceBaseOf_Product/AllResponse")]
        OrderProcessingDomain.Product[] All();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueryServiceBaseOf_Product/Count", ReplyAction="http://tempuri.org/IQueryServiceBaseOf_Product/CountResponse")]
        long Count();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueryServiceBaseOf_Product/First", ReplyAction="http://tempuri.org/IQueryServiceBaseOf_Product/FirstResponse")]
        OrderProcessingDomain.Product First();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueryServiceBaseOf_Product/Where", ReplyAction="http://tempuri.org/IQueryServiceBaseOf_Product/WhereResponse")]
        OrderProcessingDomain.Product Where(System.Xml.Linq.XElement serializedExpression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueryServiceBaseOf_Product/WhereAll", ReplyAction="http://tempuri.org/IQueryServiceBaseOf_Product/WhereAllResponse")]
        OrderProcessingDomain.Product[] WhereAll(System.Xml.Linq.XElement serializedExpression);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IProductQueryServiceChannel : OrderProcessing.ProductQueryServiceReference.IProductQueryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ProductQueryServiceClient : System.ServiceModel.ClientBase<OrderProcessing.ProductQueryServiceReference.IProductQueryService>, OrderProcessing.ProductQueryServiceReference.IProductQueryService {
        
        public ProductQueryServiceClient() {
        }
        
        public ProductQueryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductQueryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductQueryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductQueryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public OrderProcessingDomain.Product[] All() {
            return base.Channel.All();
        }
        
        public long Count() {
            return base.Channel.Count();
        }
        
        public OrderProcessingDomain.Product First() {
            return base.Channel.First();
        }
        
        public OrderProcessingDomain.Product Where(System.Xml.Linq.XElement serializedExpression) {
            return base.Channel.Where(serializedExpression);
        }
        
        public OrderProcessingDomain.Product[] WhereAll(System.Xml.Linq.XElement serializedExpression) {
            return base.Channel.WhereAll(serializedExpression);
        }
    }
}
