//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderProcessing.Tests.CommanndServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommanndServiceReference.ICommandService")]
    public interface ICommandService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ExecuteCommand", ReplyAction="http://tempuri.org/ICommandService/ExecuteCommandResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Command.RemoveOrderCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Command.UpdateOrderCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Command.AddOrderCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Order))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Customer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Employee))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<object, object>))]
        object ExecuteCommand(object command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Undo", ReplyAction="http://tempuri.org/ICommandService/UndoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Command.RemoveOrderCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Command.UpdateOrderCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Command.AddOrderCommand))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Order))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Customer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OrderProcessingDomain.Employee))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<object, object>))]
        object Undo();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ICommandServiceChannel : OrderProcessing.Tests.CommanndServiceReference.ICommandService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CommandServiceClient : System.ServiceModel.ClientBase<OrderProcessing.Tests.CommanndServiceReference.ICommandService>, OrderProcessing.Tests.CommanndServiceReference.ICommandService {
        
        public CommandServiceClient() {
        }
        
        public CommandServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommandServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public object ExecuteCommand(object command) {
            return base.Channel.ExecuteCommand(command);
        }
        
        public object Undo() {
            return base.Channel.Undo();
        }
    }
}
