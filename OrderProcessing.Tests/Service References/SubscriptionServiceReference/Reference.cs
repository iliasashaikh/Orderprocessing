//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderProcessing.Tests.SubscriptionServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SubscriptionServiceReference.ISubscriptionService", CallbackContract=typeof(OrderProcessing.Tests.SubscriptionServiceReference.ISubscriptionServiceCallback))]
    public interface ISubscriptionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriptionService/Subscribe", ReplyAction="http://tempuri.org/ISubscriptionService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionService/Subscribe", ReplyAction="http://tempuri.org/ISubscriptionService/SubscribeResponse")]
        System.IAsyncResult BeginSubscribe(System.AsyncCallback callback, object asyncState);
        
        void EndSubscribe(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriptionService/UnSubscribe", ReplyAction="http://tempuri.org/ISubscriptionService/UnSubscribeResponse")]
        void UnSubscribe();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISubscriptionService/UnSubscribe", ReplyAction="http://tempuri.org/ISubscriptionService/UnSubscribeResponse")]
        System.IAsyncResult BeginUnSubscribe(System.AsyncCallback callback, object asyncState);
        
        void EndUnSubscribe(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISubscriptionServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISubscriptionService/Notify")]
        void Notify(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/ISubscriptionService/Notify")]
        System.IAsyncResult BeginNotify(string message, System.AsyncCallback callback, object asyncState);
        
        void EndNotify(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISubscriptionServiceChannel : OrderProcessing.Tests.SubscriptionServiceReference.ISubscriptionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SubscriptionServiceClient : System.ServiceModel.DuplexClientBase<OrderProcessing.Tests.SubscriptionServiceReference.ISubscriptionService>, OrderProcessing.Tests.SubscriptionServiceReference.ISubscriptionService {
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnSubscribeDelegate;
        
        private EndOperationDelegate onEndUnSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onUnSubscribeCompletedDelegate;
        
        public SubscriptionServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SubscriptionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SubscriptionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriptionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriptionServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnSubscribeCompleted;
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscribe(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSubscribe(System.IAsyncResult result) {
            base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSubscribe(callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            this.EndSubscribe(result);
            return null;
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync() {
            this.SubscribeAsync(null);
        }
        
        public void SubscribeAsync(object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, null, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
        
        public void UnSubscribe() {
            base.Channel.UnSubscribe();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnSubscribe(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnSubscribe(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnSubscribe(System.IAsyncResult result) {
            base.Channel.EndUnSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginUnSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUnSubscribe(callback, asyncState);
        }
        
        private object[] OnEndUnSubscribe(System.IAsyncResult result) {
            this.EndUnSubscribe(result);
            return null;
        }
        
        private void OnUnSubscribeCompleted(object state) {
            if ((this.UnSubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnSubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnSubscribeAsync() {
            this.UnSubscribeAsync(null);
        }
        
        public void UnSubscribeAsync(object userState) {
            if ((this.onBeginUnSubscribeDelegate == null)) {
                this.onBeginUnSubscribeDelegate = new BeginOperationDelegate(this.OnBeginUnSubscribe);
            }
            if ((this.onEndUnSubscribeDelegate == null)) {
                this.onEndUnSubscribeDelegate = new EndOperationDelegate(this.OnEndUnSubscribe);
            }
            if ((this.onUnSubscribeCompletedDelegate == null)) {
                this.onUnSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginUnSubscribeDelegate, null, this.onEndUnSubscribeDelegate, this.onUnSubscribeCompletedDelegate, userState);
        }
    }
}
